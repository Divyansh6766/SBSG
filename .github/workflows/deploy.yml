
# name: Build and Deploy to ECS

# on:
#   push:
#     branches: [ main ]  # or your deployment branch

# jobs:
#   deploy:
#     name: Deploy to Amazon ECS
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Log in to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Debug ECR values
#         run: |
#           echo "ECR_REGISTRY: $ECR_REGISTRY"
#           echo "ECR_REPOSITORY: $ECR_REPOSITORY"
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: static-site
      

#       - name: Build, tag, and push Docker image to ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: static-site   # âœ… Hardcoded to verify
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

#       - name: Deploy to ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: testecs
#           service: ${{ secrets.ECS_SERVICE }}
#           cluster: ${{ secrets.ECS_CLUSTER }}
#           wait-for-service-stability: true
#           force-new-deployment: true


name: Build and Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: static-site
  ECS_CLUSTER: test1
  ECS_SERVICE: testecs-service-z9ns3rf3
  CONTAINER_NAME: testecs
  IMAGE_TAG: latest
  TASK_DEF_NAME: testecs

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "Building and pushing image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Get current Task Definition and sanitize
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEF_NAME }} \
            --query 'taskDefinition' > raw-taskdef.json

          jq 'del(
            .taskDefinitionArn,
            .revision,
            .status,
            .requiresAttributes,
            .compatibilities,
            .registeredAt,
            .registeredBy
          )' raw-taskdef.json > taskdef.json

      - name: Replace image in task definition
        run: |
          IMAGE_URI="${{ steps.build-image.outputs.image_uri }}"
          echo "Using IMAGE_URI: $IMAGE_URI"
          jq --arg IMAGE "$IMAGE_URI" --arg CONTAINER "${{ env.CONTAINER_NAME }}" \
            '(.containerDefinitions[] | select(.name == $CONTAINER) | .image) |= $IMAGE' \
            taskdef.json > new-taskdef.json

      - name: Register new Task Definition revision
        id: register-task-def
        run: |
          echo "Registering new task definition..."
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: "${{ env.task_def_arn }}"
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true

